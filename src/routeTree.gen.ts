/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardManagementUsersImport } from './routes/dashboard/management-users'
import { Route as DashboardFirstImport } from './routes/dashboard/first'
import { Route as DashboardAccessDeniedTypeErrorImport } from './routes/dashboard/access-denied.$typeError'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardManagementUsersRoute = DashboardManagementUsersImport.update({
  id: '/management-users',
  path: '/management-users',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardFirstRoute = DashboardFirstImport.update({
  id: '/first',
  path: '/first',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardAccessDeniedTypeErrorRoute =
  DashboardAccessDeniedTypeErrorImport.update({
    id: '/access-denied/$typeError',
    path: '/access-denied/$typeError',
    getParentRoute: () => DashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/first': {
      id: '/dashboard/first'
      path: '/first'
      fullPath: '/dashboard/first'
      preLoaderRoute: typeof DashboardFirstImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/management-users': {
      id: '/dashboard/management-users'
      path: '/management-users'
      fullPath: '/dashboard/management-users'
      preLoaderRoute: typeof DashboardManagementUsersImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/access-denied/$typeError': {
      id: '/dashboard/access-denied/$typeError'
      path: '/access-denied/$typeError'
      fullPath: '/dashboard/access-denied/$typeError'
      preLoaderRoute: typeof DashboardAccessDeniedTypeErrorImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardFirstRoute: typeof DashboardFirstRoute
  DashboardManagementUsersRoute: typeof DashboardManagementUsersRoute
  DashboardAccessDeniedTypeErrorRoute: typeof DashboardAccessDeniedTypeErrorRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardFirstRoute: DashboardFirstRoute,
  DashboardManagementUsersRoute: DashboardManagementUsersRoute,
  DashboardAccessDeniedTypeErrorRoute: DashboardAccessDeniedTypeErrorRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/first': typeof DashboardFirstRoute
  '/dashboard/management-users': typeof DashboardManagementUsersRoute
  '/dashboard/access-denied/$typeError': typeof DashboardAccessDeniedTypeErrorRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/first': typeof DashboardFirstRoute
  '/dashboard/management-users': typeof DashboardManagementUsersRoute
  '/dashboard/access-denied/$typeError': typeof DashboardAccessDeniedTypeErrorRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/first': typeof DashboardFirstRoute
  '/dashboard/management-users': typeof DashboardManagementUsersRoute
  '/dashboard/access-denied/$typeError': typeof DashboardAccessDeniedTypeErrorRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/first'
    | '/dashboard/management-users'
    | '/dashboard/access-denied/$typeError'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/dashboard/first'
    | '/dashboard/management-users'
    | '/dashboard/access-denied/$typeError'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/first'
    | '/dashboard/management-users'
    | '/dashboard/access-denied/$typeError'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/dashboard": {
      "filePath": "dashboard.jsx",
      "children": [
        "/dashboard/first",
        "/dashboard/management-users",
        "/dashboard/access-denied/$typeError"
      ]
    },
    "/dashboard/first": {
      "filePath": "dashboard/first.jsx",
      "parent": "/dashboard"
    },
    "/dashboard/management-users": {
      "filePath": "dashboard/management-users.jsx",
      "parent": "/dashboard"
    },
    "/dashboard/access-denied/$typeError": {
      "filePath": "dashboard/access-denied.$typeError.jsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
